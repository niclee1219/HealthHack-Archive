{"name":"Regression workflow","description":null,"organizationId":653753,"isEnabled":false,"crontab":null,"timezone":"Asia/Singapore","blockData":[{"top":32,"left":384,"uuid":"fd2cda8f-1c0a-484a-bc71-e38e9f4f0e69","options":{},"pluginId":"startTrigger","blockType":"webhook","editorType":"JavascriptQuery","onboarding":false,"environment":"production","isMinimized":false,"resourceName":"webhook","incomingOnSuccessEdges":[]},{"top":32,"left":816,"uuid":"349ad553-8ef9-4774-8747-8c4bc53dfcc8","pluginId":"sqlQuery","blockType":"default","editorType":"SqlQueryUnified","onboarding":false,"environment":"production","resourceName":"22e50d11-f0ca-4f09-96e4-50e5b99a2b52","responsePanelState":"open","incomingOnSuccessEdges":["fd2cda8f-1c0a-484a-bc71-e38e9f4f0e69"]},{"top":-688,"left":1248,"uuid":"f856538e-1a67-43c4-8946-6d88704d315a","pluginId":"code","blockType":"code","dimensions":{"width":752,"height":896},"editorType":"PythonQuery","onboarding":false,"environment":"production","resourceName":"PythonQuery","responsePanelState":"open","incomingOnSuccessEdges":["349ad553-8ef9-4774-8747-8c4bc53dfcc8"]},{"top":32,"left":1680,"uuid":"5edefa9a-5d83-4749-8f74-62e72e25122d","options":{"body":"{\n  \"model_coefficients\": code.data.coefficients ,\n  \"model_intercept\": code.data.intercept,\n  \"r2_score\": code.data.r2_score,\n  \"mean_squared_error\": code.data.mean_squared_error,\n  \"outliers\": code.data.outliers \n}\n\n\n\n","status":"200"},"pluginId":"webhookReturn1","blockType":"webhookReturn","editorType":"JavascriptQuery","onboarding":false,"environment":"production","isMinimized":false,"resourceName":"JavascriptQuery","responsePanelState":"open","incomingOnSuccessEdges":["f856538e-1a67-43c4-8946-6d88704d315a"]}],"templateData":"[\"~#iR\",[\"^ \",\"n\",\"appTemplate\",\"v\",[\"^ \",\"isFetching\",false,\"plugins\",[\"~#iOM\",[\"startTrigger\",[\"^0\",[\"^ \",\"n\",\"pluginTemplate\",\"v\",[\"^ \",\"id\",\"startTrigger\",\"uuid\",null,\"type\",\"datasource\",\"subtype\",\"JavascriptQuery\",\"namespace\",null,\"resourceName\",\"JavascriptQuery\",\"resourceDisplayName\",null,\"template\",[\"^3\",[\"queryRefreshTime\",\"\",\"allowedGroupIds\",[\"~#iL\",[]],\"streamResponse\",false,\"lastReceivedFromResourceAt\",null,\"queryDisabledMessage\",\"\",\"servedFromCache\",false,\"offlineUserQueryInputs\",\"\",\"successMessage\",\"\",\"queryDisabled\",\"\",\"playgroundQuerySaveId\",\"latest\",\"workflowParams\",null,\"resourceNameOverride\",\"\",\"runWhenModelUpdates\",false,\"workflowRunId\",null,\"showFailureToaster\",true,\"query\",\"return null\",\"playgroundQueryUuid\",\"\",\"playgroundQueryId\",null,\"error\",null,\"workflowRunBodyType\",\"raw\",\"privateParams\",[\"^;\",[]],\"workflowBlockUuid\",null,\"runWhenPageLoadsDelay\",\"\",\"data\",null,\"importedQueryInputs\",[\"^3\",[]],\"_additionalScope\",[\"^;\",[]],\"isImported\",false,\"showSuccessToaster\",true,\"cacheKeyTtl\",\"\",\"requestSentTimestamp\",null,\"metadata\",null,\"workflowActionType\",null,\"queryRunTime\",null,\"changesetObject\",\"\",\"errorTransformer\",\"// The variable 'data' allows you to reference the request's data in the transformer. \\n// example: return data.find(element => element.isError)\\nreturn data.error\",\"finished\",null,\"confirmationMessage\",null,\"isFetching\",false,\"changeset\",\"\",\"rawData\",null,\"queryTriggerDelay\",\"0\",\"resourceTypeOverride\",null,\"watchedParams\",[\"^;\",[]],\"enableErrorTransformer\",false,\"showLatestVersionUpdatedWarning\",false,\"timestamp\",0,\"evalType\",\"script\",\"importedQueryDefaults\",[\"^3\",[]],\"enableTransformer\",false,\"showUpdateSetValueDynamicallyToggle\",true,\"overrideOrgCacheForUserCache\",false,\"runWhenPageLoads\",false,\"transformer\",\"// Query results are available as the `data` variable\\nreturn data\",\"events\",[\"^;\",[]],\"queryTimeout\",\"10000\",\"workflowId\",null,\"requireConfirmation\",false,\"queryFailureConditions\",\"\",\"changesetIsObject\",false,\"enableCaching\",false,\"allowedGroups\",[\"^;\",[]],\"offlineQueryType\",\"None\",\"queryThrottleTime\",\"750\",\"updateSetValueDynamically\",false,\"notificationDuration\",\"\"]],\"style\",null,\"position2\",null,\"mobilePosition2\",null,\"mobileAppPosition\",null,\"tabIndex\",null,\"container\",\"\",\"createdAt\",\"~m1707297643822\",\"updatedAt\",\"~m1707297643822\",\"folder\",\"\",\"screen\",null]]],\"sqlQuery\",[\"^0\",[\"^ \",\"n\",\"pluginTemplate\",\"v\",[\"^ \",\"id\",\"sqlQuery\",\"^4\",null,\"^5\",\"datasource\",\"^6\",\"RESTQuery\",\"^7\",null,\"^8\",\"22e50d11-f0ca-4f09-96e4-50e5b99a2b52\",\"^9\",null,\"^:\",[\"^3\",[\"queryRefreshTime\",\"\",\"paginationLimit\",\"\",\"allowedGroupIds\",[\"^;\",[]],\"streamResponse\",false,\"body\",\"\",\"lastReceivedFromResourceAt\",null,\"queryDisabledMessage\",\"\",\"servedFromCache\",false,\"offlineUserQueryInputs\",\"\",\"successMessage\",\"\",\"queryDisabled\",\"\",\"playgroundQuerySaveId\",\"latest\",\"workflowParams\",null,\"resourceNameOverride\",\"\",\"runWhenModelUpdates\",true,\"paginationPaginationField\",\"\",\"headers\",\"\",\"workflowRunId\",null,\"showFailureToaster\",true,\"paginationEnabled\",false,\"query\",\"SELECT * FROM roomstats\",\"playgroundQueryUuid\",\"\",\"playgroundQueryId\",null,\"error\",null,\"workflowRunBodyType\",\"raw\",\"privateParams\",[\"^;\",[]],\"workflowBlockUuid\",null,\"runWhenPageLoadsDelay\",\"\",\"warningCodes\",[\"^;\",[]],\"data\",null,\"importedQueryInputs\",[\"^3\",[]],\"isImported\",false,\"showSuccessToaster\",true,\"cacheKeyTtl\",\"\",\"requestSentTimestamp\",null,\"cookies\",\"\",\"metadata\",null,\"workflowActionType\",null,\"editorMode\",\"sql\",\"queryRunTime\",null,\"changesetObject\",\"\",\"errorTransformer\",\"// The variable 'data' allows you to reference the request's data in the transformer. \\n// example: return data.find(element => element.isError)\\nreturn data.error\",\"finished\",null,\"confirmationMessage\",null,\"isFetching\",false,\"changeset\",\"\",\"rawData\",null,\"queryTriggerDelay\",\"0\",\"resourceTypeOverride\",null,\"watchedParams\",[\"^;\",[]],\"enableErrorTransformer\",false,\"showLatestVersionUpdatedWarning\",false,\"paginationDataField\",\"\",\"timestamp\",0,\"evalType\",\"script\",\"importedQueryDefaults\",[\"^3\",[]],\"enableTransformer\",false,\"showUpdateSetValueDynamicallyToggle\",true,\"version\",2,\"overrideOrgCacheForUserCache\",false,\"runWhenPageLoads\",false,\"transformer\",\"// Query results are available as the `data` variable\\nreturn data\",\"events\",[\"^;\",[]],\"queryTimeout\",\"10000\",\"workflowId\",null,\"requireConfirmation\",false,\"type\",\"GET\",\"queryFailureConditions\",\"\",\"changesetIsObject\",false,\"enableCaching\",false,\"allowedGroups\",[\"^;\",[]],\"bodyType\",\"none\",\"offlineQueryType\",\"None\",\"queryThrottleTime\",\"750\",\"updateSetValueDynamically\",false,\"notificationDuration\",\"\"]],\"^<\",null,\"^=\",null,\"^>\",null,\"^?\",null,\"^@\",null,\"^A\",\"\",\"^B\",\"~m1707299318544\",\"^C\",\"~m1707322202764\",\"^D\",\"\",\"^E\",null]]],\"code\",[\"^0\",[\"^ \",\"n\",\"pluginTemplate\",\"v\",[\"^ \",\"id\",\"code\",\"^4\",null,\"^5\",\"datasource\",\"^6\",\"PythonQuery\",\"^7\",null,\"^8\",\"PythonQuery\",\"^9\",null,\"^:\",[\"^3\",[\"queryRefreshTime\",\"\",\"allowedGroupIds\",[\"^;\",[]],\"streamResponse\",false,\"lastReceivedFromResourceAt\",null,\"queryDisabledMessage\",\"\",\"servedFromCache\",false,\"offlineUserQueryInputs\",\"\",\"successMessage\",\"\",\"queryDisabled\",\"\",\"playgroundQuerySaveId\",\"latest\",\"workflowParams\",null,\"resourceNameOverride\",\"\",\"runWhenModelUpdates\",false,\"workflowRunId\",null,\"showFailureToaster\",true,\"query\",\"import pandas as pd\\nimport numpy as np\\nfrom sklearn.linear_model import LinearRegression\\nfrom sklearn.metrics import mean_squared_error, r2_score\\n\\n# Load data\\nroomstats = pd.DataFrame(sqlQuery.data)\\nroomstats['energy_used'] = pd.to_numeric(roomstats['energy_used'], errors='coerce')\\nroomstats['Temperature'] = pd.to_numeric(roomstats['Temperature'], errors='coerce')\\nroomstats['Humidity'] = pd.to_numeric(roomstats['Humidity'], errors='coerce')\\nroomstats['floor_area'] = pd.to_numeric(roomstats['floor_area'], errors='coerce')\\n\\n# Define the model\\nmodel = LinearRegression()\\n\\n# Define independent variables\\nX = roomstats[['Temperature', 'Humidity', 'floor_area']]\\n\\n# Fit the model\\nmodel.fit(X, roomstats['energy_used'])\\n\\n# Predict\\npredictions = model.predict(X)\\n\\n# Generate regression line data\\nx_range = np.linspace(roomstats['Temperature'].min(), roomstats['Temperature'].max(), num=100)\\n# Replicate mean values of Humidity and floor_area to match the size of x_range\\nhumidity_mean = np.full_like(x_range, np.mean(roomstats['Humidity']))\\nfloor_area_mean = np.full_like(x_range, np.mean(roomstats['floor_area']))\\ny_range = model.predict(np.column_stack((x_range, humidity_mean, floor_area_mean)))\\nregression_line = pd.DataFrame({\\n    'Temperature': x_range,\\n    'predicted_energy_used': y_range\\n})\\n\\n# Calculate residuals\\nresiduals = roomstats['energy_used'] - predictions\\n\\n# Identify outliers\\noutliers = roomstats.loc[np.abs(residuals) > 1.5 * np.std(residuals), 'id'].tolist()\\n\\n# Return the model's coefficients, intercept, R^2 score, mean squared error, and outliers\\nresults = {\\n    'coefficients': model.coef_.tolist(),\\n    'intercept': float(model.intercept_),\\n    'r2_score': float(r2_score(roomstats['energy_used'], predictions)),\\n    'mean_squared_error': float(mean_squared_error(roomstats['energy_used'], predictions)),\\n    'outliers': outliers,\\n    'regression_line': regression_line.to_dict(orient='records')\\n}\\n\\nreturn results\\n\",\"playgroundQueryUuid\",\"\",\"playgroundQueryId\",null,\"error\",null,\"workflowRunBodyType\",\"raw\",\"privateParams\",[\"^;\",[]],\"workflowBlockUuid\",null,\"runWhenPageLoadsDelay\",\"\",\"data\",null,\"importedQueryInputs\",[\"^3\",[]],\"isImported\",false,\"showSuccessToaster\",true,\"cacheKeyTtl\",\"\",\"requestSentTimestamp\",null,\"metadata\",null,\"workflowActionType\",null,\"queryRunTime\",null,\"changesetObject\",\"\",\"errorTransformer\",\"// The variable 'data' allows you to reference the request's data in the transformer. \\n// example: return data.find(element => element.isError)\\nreturn data.error\",\"finished\",null,\"confirmationMessage\",null,\"isFetching\",false,\"changeset\",\"\",\"rawData\",null,\"queryTriggerDelay\",\"0\",\"resourceTypeOverride\",null,\"watchedParams\",[\"^;\",[]],\"enableErrorTransformer\",false,\"showLatestVersionUpdatedWarning\",false,\"timestamp\",0,\"evalType\",\"script\",\"importedQueryDefaults\",[\"^3\",[]],\"enableTransformer\",false,\"showUpdateSetValueDynamicallyToggle\",true,\"overrideOrgCacheForUserCache\",false,\"runWhenPageLoads\",false,\"transformer\",\"// Query results are available as the `data` variable\\nreturn data\",\"events\",[\"^;\",[]],\"queryTimeout\",\"120000\",\"workflowId\",null,\"requireConfirmation\",false,\"queryFailureConditions\",\"\",\"changesetIsObject\",false,\"enableCaching\",false,\"allowedGroups\",[\"^;\",[]],\"offlineQueryType\",\"None\",\"queryThrottleTime\",\"750\",\"updateSetValueDynamically\",false,\"notificationDuration\",\"\"]],\"^<\",null,\"^=\",null,\"^>\",null,\"^?\",null,\"^@\",null,\"^A\",\"\",\"^B\",\"~m1707299320318\",\"^C\",\"~m1707322230807\",\"^D\",\"\",\"^E\",null]]],\"webhookReturn1\",[\"^0\",[\"^ \",\"n\",\"pluginTemplate\",\"v\",[\"^ \",\"id\",\"webhookReturn1\",\"^4\",null,\"^5\",\"datasource\",\"^6\",\"JavascriptQuery\",\"^7\",null,\"^8\",\"JavascriptQuery\",\"^9\",null,\"^:\",[\"^3\",[\"queryRefreshTime\",\"\",\"allowedGroupIds\",[\"^;\",[]],\"streamResponse\",false,\"lastReceivedFromResourceAt\",null,\"queryDisabledMessage\",\"\",\"servedFromCache\",false,\"offlineUserQueryInputs\",\"\",\"successMessage\",\"\",\"queryDisabled\",\"\",\"playgroundQuerySaveId\",\"latest\",\"workflowParams\",null,\"resourceNameOverride\",\"\",\"runWhenModelUpdates\",false,\"workflowRunId\",null,\"showFailureToaster\",true,\"query\",\"const generateReturn = () => {\\n    const status = () => {\\n      try {\\n        return 200\\n      } catch {\\n        return 200\\n      }\\n    }\\n  const body = () => {\\n    try {\\n      return {\\n  \\\"model_coefficients\\\": code.data.coefficients ,\\n  \\\"model_intercept\\\": code.data.intercept,\\n  \\\"r2_score\\\": code.data.r2_score,\\n  \\\"mean_squared_error\\\": code.data.mean_squared_error,\\n  \\\"outliers\\\": code.data.outliers \\n}\\n\\n\\n\\n\\n    } catch {\\n      return {'error': true, 'messsage': 'there was a problem parsing the JSON body of webhookReturn1'}\\n    }\\n  }\\n  return {status: status(), body: body() }\\n  }\\n  return generateReturn()\\n  \",\"playgroundQueryUuid\",\"\",\"playgroundQueryId\",null,\"error\",null,\"workflowRunBodyType\",\"raw\",\"privateParams\",[\"^;\",[]],\"workflowBlockUuid\",null,\"runWhenPageLoadsDelay\",\"\",\"data\",null,\"importedQueryInputs\",[\"^3\",[]],\"_additionalScope\",[\"^;\",[]],\"isImported\",false,\"showSuccessToaster\",true,\"cacheKeyTtl\",\"\",\"requestSentTimestamp\",null,\"metadata\",null,\"workflowActionType\",null,\"editorMode\",\"sql\",\"queryRunTime\",null,\"changesetObject\",\"\",\"errorTransformer\",\"// The variable 'data' allows you to reference the request's data in the transformer. \\n// example: return data.find(element => element.isError)\\nreturn data.error\",\"finished\",null,\"confirmationMessage\",null,\"isFetching\",false,\"changeset\",\"\",\"rawData\",null,\"queryTriggerDelay\",\"0\",\"resourceTypeOverride\",null,\"watchedParams\",[\"^;\",[]],\"enableErrorTransformer\",false,\"showLatestVersionUpdatedWarning\",false,\"timestamp\",0,\"evalType\",\"script\",\"importedQueryDefaults\",[\"^3\",[]],\"enableTransformer\",false,\"showUpdateSetValueDynamicallyToggle\",true,\"overrideOrgCacheForUserCache\",false,\"runWhenPageLoads\",false,\"transformer\",\"// Query results are available as the `data` variable\\nreturn data\",\"events\",[\"^;\",[]],\"queryTimeout\",\"10000\",\"workflowId\",null,\"requireConfirmation\",false,\"queryFailureConditions\",\"\",\"changesetIsObject\",false,\"enableCaching\",false,\"allowedGroups\",[\"^;\",[]],\"offlineQueryType\",\"None\",\"queryThrottleTime\",\"750\",\"updateSetValueDynamically\",false,\"notificationDuration\",\"\"]],\"^<\",null,\"^=\",null,\"^>\",null,\"^?\",null,\"^@\",null,\"^A\",\"\",\"^B\",\"~m1707299336355\",\"^C\",\"~m1707303439513\",\"^D\",\"\",\"^E\",null]]]]],\"^B\",null,\"version\",\"3.33.0\",\"appThemeId\",null,\"appThemeName\",null,\"appMaxWidth\",\"100%\",\"preloadedAppJavaScript\",null,\"preloadedAppJSLinks\",[],\"testEntities\",[],\"tests\",[],\"appStyles\",\"\",\"responsiveLayoutDisabled\",false,\"loadingIndicatorsDisabled\",false,\"urlFragmentDefinitions\",[\"^;\",[]],\"pageLoadValueOverrides\",[\"^;\",[]],\"customDocumentTitle\",\"\",\"customDocumentTitleEnabled\",false,\"customShortcuts\",[],\"isGlobalWidget\",false,\"isMobileApp\",false,\"isFormApp\",false,\"shortlink\",null,\"multiScreenMobileApp\",false,\"mobileAppSettings\",[\"^ \",\"mobileOfflineModeEnabled\",false,\"mobileOfflineModeDelaySync\",false,\"mobileOfflineModeBannerMode\",\"default\",\"displaySetting\",[\"^ \",\"landscapeMode\",false,\"tabletMode\",false]],\"notificationsSettings\",[\"^ \",\"globalQueryShowFailureToast\",true,\"globalQueryShowSuccessToast\",false,\"globalQueryToastDuration\",4.5],\"folders\",[\"^;\",[]],\"queryStatusVisibility\",false,\"markdownLinkBehavior\",\"auto\",\"inAppRetoolPillAppearance\",\"NO_OVERRIDE\",\"rootScreen\",null,\"instrumentationEnabled\",false,\"experimentalFeatures\",[\"^ \",\"sourceControlTemplateDehydration\",false,\"multiplayerEditingEnabled\",false,\"disableMultiplayerEditing\",false],\"experimentalDataTabEnabled\",false,\"customComponentCollections\",[],\"savePlatform\",\"web\"]]]","triggerWebhooks":[{"name":"startTrigger","uuid":"startTrigger","inputSchema":{"properties":[]},"useHeaderApiKey":false,"exampleInputJSON":""}],"customLibraries":[{"version":"4.17.21","language":"javascript","variable":"_","codeString":"/* Edit library variable below */\n\nconst _ = require('lodash')\n\n/* Add destructured imports from library below\neg. const { pow, log } = require(\"mathjs\") */\n","libraryName":"lodash"},{"version":"2.1.0","language":"javascript","variable":"numbro","codeString":"/* Edit library variable below */\n\nconst numbro = require('numbro')\n\n/* Add destructured imports from library below\neg. const { pow, log } = require(\"mathjs\") */\n","libraryName":"numbro"},{"version":"5.3.2","language":"javascript","variable":"Papa","codeString":"/* Edit library variable below */\n\nconst Papa = require('papaparse')\n\n/* Add destructured imports from library below\neg. const { pow, log } = require(\"mathjs\") */\n","libraryName":"papaparse"},{"version":"0.5.23","language":"javascript","variable":"moment","codeString":"/* Edit library variable below */\n\nconst moment = require('moment-timezone')\n\n/* Add destructured imports from library below\neg. const { pow, log } = require(\"mathjs\") */\n","libraryName":"moment-timezone"},{"version":"3.4.0","language":"javascript","variable":"uuid","codeString":"/* Edit library variable below */\n\nconst uuid = require('uuid')\n\n/* Add destructured imports from library below\neg. const { pow, log } = require(\"mathjs\") */\n","libraryName":"uuid"}],"createdBy":959881,"protected":false,"javascriptLanguageConfigurationSaveId":null,"pythonLanguageConfigurationSaveId":null,"setupScripts":{"python":{"codeString":""},"javascript":{"codeString":""}}}