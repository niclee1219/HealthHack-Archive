{"name":"Time series workflow","description":null,"organizationId":653753,"isEnabled":false,"crontab":null,"timezone":"Asia/Singapore","blockData":[{"top":48,"left":48,"uuid":"fabac55c-8306-4fa7-8fa5-3c308a4545b9","options":{},"pluginId":"startTrigger","blockType":"webhook","editorType":"JavascriptQuery","onboarding":false,"environment":"production","isMinimized":false,"resourceName":"webhook","incomingOnSuccessEdges":[]},{"top":48,"left":480,"uuid":"0c282a41-524e-4d88-9354-db950362df17","pluginId":"sqlQuery","blockType":"default","editorType":"SqlQueryUnified","onboarding":false,"environment":"production","resourceName":"22e50d11-f0ca-4f09-96e4-50e5b99a2b52","responsePanelState":"open","incomingOnSuccessEdges":["fabac55c-8306-4fa7-8fa5-3c308a4545b9"]},{"top":48,"left":912,"uuid":"d57f431b-21c2-4762-b396-7ecb87033ac9","pluginId":"code","blockType":"code","dimensions":{"width":400,"height":400},"editorType":"PythonQuery","onboarding":false,"environment":"production","resourceName":"PythonQuery","responsePanelState":"open","incomingOnSuccessEdges":["0c282a41-524e-4d88-9354-db950362df17"]},{"top":48,"left":1344,"uuid":"d6473beb-7654-49b5-b087-816550f102b4","options":{"body":"{\n  \"predictions\": code.data.predictions\n}","status":"200"},"pluginId":"webhookReturn1","blockType":"webhookReturn","editorType":"JavascriptQuery","onboarding":false,"environment":"production","isMinimized":false,"resourceName":"JavascriptQuery","responsePanelState":"open","incomingOnSuccessEdges":["d57f431b-21c2-4762-b396-7ecb87033ac9"]}],"templateData":"[\"~#iR\",[\"^ \",\"n\",\"appTemplate\",\"v\",[\"^ \",\"isFetching\",false,\"plugins\",[\"~#iOM\",[\"startTrigger\",[\"^0\",[\"^ \",\"n\",\"pluginTemplate\",\"v\",[\"^ \",\"id\",\"startTrigger\",\"uuid\",null,\"type\",\"datasource\",\"subtype\",\"JavascriptQuery\",\"namespace\",null,\"resourceName\",\"JavascriptQuery\",\"resourceDisplayName\",null,\"template\",[\"^3\",[\"queryRefreshTime\",\"\",\"allowedGroupIds\",[\"~#iL\",[]],\"streamResponse\",false,\"lastReceivedFromResourceAt\",null,\"queryDisabledMessage\",\"\",\"servedFromCache\",false,\"offlineUserQueryInputs\",\"\",\"successMessage\",\"\",\"queryDisabled\",\"\",\"playgroundQuerySaveId\",\"latest\",\"workflowParams\",null,\"resourceNameOverride\",\"\",\"runWhenModelUpdates\",false,\"workflowRunId\",null,\"showFailureToaster\",true,\"query\",\"return null\",\"playgroundQueryUuid\",\"\",\"playgroundQueryId\",null,\"error\",null,\"workflowRunBodyType\",\"raw\",\"privateParams\",[\"^;\",[]],\"workflowBlockUuid\",null,\"runWhenPageLoadsDelay\",\"\",\"data\",null,\"importedQueryInputs\",[\"^3\",[]],\"_additionalScope\",[\"^;\",[]],\"isImported\",false,\"showSuccessToaster\",true,\"cacheKeyTtl\",\"\",\"requestSentTimestamp\",null,\"metadata\",null,\"workflowActionType\",null,\"queryRunTime\",null,\"changesetObject\",\"\",\"errorTransformer\",\"// The variable 'data' allows you to reference the request's data in the transformer. \\n// example: return data.find(element => element.isError)\\nreturn data.error\",\"finished\",null,\"confirmationMessage\",null,\"isFetching\",false,\"changeset\",\"\",\"rawData\",null,\"queryTriggerDelay\",\"0\",\"resourceTypeOverride\",null,\"watchedParams\",[\"^;\",[]],\"enableErrorTransformer\",false,\"showLatestVersionUpdatedWarning\",false,\"timestamp\",0,\"evalType\",\"script\",\"importedQueryDefaults\",[\"^3\",[]],\"enableTransformer\",false,\"showUpdateSetValueDynamicallyToggle\",true,\"overrideOrgCacheForUserCache\",false,\"runWhenPageLoads\",false,\"transformer\",\"// Query results are available as the `data` variable\\nreturn data\",\"events\",[\"^;\",[]],\"queryTimeout\",\"10000\",\"workflowId\",null,\"requireConfirmation\",false,\"queryFailureConditions\",\"\",\"changesetIsObject\",false,\"enableCaching\",false,\"allowedGroups\",[\"^;\",[]],\"offlineQueryType\",\"None\",\"queryThrottleTime\",\"750\",\"updateSetValueDynamically\",false,\"notificationDuration\",\"\"]],\"style\",null,\"position2\",null,\"mobilePosition2\",null,\"mobileAppPosition\",null,\"tabIndex\",null,\"container\",\"\",\"createdAt\",\"~m1707302112595\",\"updatedAt\",\"~m1707302112595\",\"folder\",\"\",\"screen\",null]]],\"sqlQuery\",[\"^0\",[\"^ \",\"n\",\"pluginTemplate\",\"v\",[\"^ \",\"id\",\"sqlQuery\",\"^4\",null,\"^5\",\"datasource\",\"^6\",\"RESTQuery\",\"^7\",null,\"^8\",\"22e50d11-f0ca-4f09-96e4-50e5b99a2b52\",\"^9\",null,\"^:\",[\"^3\",[\"queryRefreshTime\",\"\",\"paginationLimit\",\"\",\"allowedGroupIds\",[\"^;\",[]],\"streamResponse\",false,\"body\",\"\",\"lastReceivedFromResourceAt\",null,\"queryDisabledMessage\",\"\",\"servedFromCache\",false,\"offlineUserQueryInputs\",\"\",\"successMessage\",\"\",\"queryDisabled\",\"\",\"playgroundQuerySaveId\",\"latest\",\"workflowParams\",null,\"resourceNameOverride\",\"\",\"runWhenModelUpdates\",true,\"paginationPaginationField\",\"\",\"headers\",\"\",\"workflowRunId\",null,\"showFailureToaster\",true,\"paginationEnabled\",false,\"query\",\"SELECT \\\"Energy_consumption_k_wh\\\", \\\"Time\\\" FROM energy ORDER BY \\\"Time\\\" DESC limit 1000\",\"playgroundQueryUuid\",\"\",\"playgroundQueryId\",null,\"error\",null,\"workflowRunBodyType\",\"raw\",\"privateParams\",[\"^;\",[]],\"workflowBlockUuid\",null,\"runWhenPageLoadsDelay\",\"\",\"warningCodes\",[\"^;\",[]],\"data\",null,\"importedQueryInputs\",[\"^3\",[]],\"isImported\",false,\"showSuccessToaster\",true,\"cacheKeyTtl\",\"\",\"requestSentTimestamp\",null,\"cookies\",\"\",\"metadata\",null,\"workflowActionType\",null,\"queryRunTime\",null,\"changesetObject\",\"\",\"errorTransformer\",\"// The variable 'data' allows you to reference the request's data in the transformer. \\n// example: return data.find(element => element.isError)\\nreturn data.error\",\"finished\",null,\"confirmationMessage\",null,\"isFetching\",false,\"changeset\",\"\",\"rawData\",null,\"queryTriggerDelay\",\"0\",\"resourceTypeOverride\",null,\"watchedParams\",[\"^;\",[]],\"enableErrorTransformer\",false,\"showLatestVersionUpdatedWarning\",false,\"paginationDataField\",\"\",\"timestamp\",0,\"evalType\",\"script\",\"importedQueryDefaults\",[\"^3\",[]],\"enableTransformer\",false,\"showUpdateSetValueDynamicallyToggle\",true,\"version\",2,\"overrideOrgCacheForUserCache\",false,\"runWhenPageLoads\",false,\"transformer\",\"// Query results are available as the `data` variable\\nreturn data\",\"events\",[\"^;\",[]],\"queryTimeout\",\"10000\",\"workflowId\",null,\"requireConfirmation\",false,\"type\",\"GET\",\"queryFailureConditions\",\"\",\"changesetIsObject\",false,\"enableCaching\",false,\"allowedGroups\",[\"^;\",[]],\"bodyType\",\"none\",\"offlineQueryType\",\"None\",\"queryThrottleTime\",\"750\",\"updateSetValueDynamically\",false,\"notificationDuration\",\"\"]],\"^<\",null,\"^=\",null,\"^>\",null,\"^?\",null,\"^@\",null,\"^A\",\"\",\"^B\",\"~m1707324235940\",\"^C\",\"~m1707328202058\",\"^D\",\"\",\"^E\",null]]],\"code\",[\"^0\",[\"^ \",\"n\",\"pluginTemplate\",\"v\",[\"^ \",\"id\",\"code\",\"^4\",null,\"^5\",\"datasource\",\"^6\",\"JavascriptQuery\",\"^7\",null,\"^8\",\"JavascriptQuery\",\"^9\",null,\"^:\",[\"^3\",[\"queryRefreshTime\",\"\",\"allowedGroupIds\",[\"^;\",[]],\"streamResponse\",false,\"lastReceivedFromResourceAt\",null,\"queryDisabledMessage\",\"\",\"servedFromCache\",false,\"offlineUserQueryInputs\",\"\",\"successMessage\",\"\",\"queryDisabled\",\"\",\"playgroundQuerySaveId\",\"latest\",\"workflowParams\",null,\"resourceNameOverride\",\"\",\"runWhenModelUpdates\",false,\"workflowRunId\",null,\"showFailureToaster\",true,\"query\",\"import pandas as pd\\nimport datetime as dt\\nfrom sklearn.model_selection import train_test_split\\nfrom sklearn.linear_model import LinearRegression\\n\\n# Prepare data\\nenergy_data = pd.DataFrame(sqlQuery.data)\\nenergy_data['Time'] = pd.to_datetime(energy_data['Time'])\\nenergy_data['Time'] = energy_data['Time'].map(dt.datetime.toordinal)\\n\\n# Split data into training and testing sets\\nX_train, X_test, y_train, y_test = train_test_split(energy_data[['Time']], energy_data['Energy_consumption_k_wh'], test_size=0.2, random_state=0)\\n\\n# Train the model\\nmodel = LinearRegression()\\nmodel.fit(X_train, y_train)\\n\\n# Predict future energy consumption\\nfuture_time = pd.date_range(start='2024-02-01', end='2024-03-09').to_pydatetime().tolist()\\nfuture_time_ordinals = [x.toordinal() for x in future_time]\\nfuture_time_df = pd.DataFrame({'Time': future_time_ordinals})\\npredictions = model.predict(future_time_df)\\n\\n# Convert ordinal dates back to datetime and predictions to JSON serializable types\\nfuture_dates = [str(dt.datetime.fromordinal(x)) for x in future_time_ordinals]\\npredictions_json = [float(x) for x in predictions]\\n\\n# Combine dates and predictions into a dictionary\\nprediction_dict = {'Date': future_dates, 'Predicted_Energy_Consumption_kWh': predictions_json}\\n\\n# Return predictions along with dates\\nreturn prediction_dict\\n\",\"playgroundQueryUuid\",\"\",\"playgroundQueryId\",null,\"error\",null,\"workflowRunBodyType\",\"raw\",\"privateParams\",[\"^;\",[]],\"workflowBlockUuid\",null,\"runWhenPageLoadsDelay\",\"\",\"data\",null,\"importedQueryInputs\",[\"^3\",[]],\"_additionalScope\",[\"^;\",[]],\"isImported\",false,\"showSuccessToaster\",true,\"cacheKeyTtl\",\"\",\"requestSentTimestamp\",null,\"metadata\",null,\"workflowActionType\",null,\"queryRunTime\",null,\"changesetObject\",\"\",\"errorTransformer\",\"// The variable 'data' allows you to reference the request's data in the transformer. \\n// example: return data.find(element => element.isError)\\nreturn data.error\",\"finished\",null,\"confirmationMessage\",null,\"isFetching\",false,\"changeset\",\"\",\"rawData\",null,\"queryTriggerDelay\",\"0\",\"resourceTypeOverride\",null,\"watchedParams\",[\"^;\",[]],\"enableErrorTransformer\",false,\"showLatestVersionUpdatedWarning\",false,\"timestamp\",0,\"evalType\",\"script\",\"importedQueryDefaults\",[\"^3\",[]],\"enableTransformer\",false,\"showUpdateSetValueDynamicallyToggle\",true,\"overrideOrgCacheForUserCache\",false,\"runWhenPageLoads\",false,\"transformer\",\"// Query results are available as the `data` variable\\nreturn data\",\"events\",[\"^;\",[]],\"queryTimeout\",\"10000\",\"workflowId\",null,\"requireConfirmation\",false,\"queryFailureConditions\",\"\",\"changesetIsObject\",false,\"enableCaching\",false,\"allowedGroups\",[\"^;\",[]],\"offlineQueryType\",\"None\",\"queryThrottleTime\",\"750\",\"updateSetValueDynamically\",false,\"notificationDuration\",\"\"]],\"^<\",null,\"^=\",null,\"^>\",null,\"^?\",null,\"^@\",null,\"^A\",\"\",\"^B\",\"~m1707324237728\",\"^C\",\"~m1707327587002\",\"^D\",\"\",\"^E\",null]]],\"webhookReturn1\",[\"^0\",[\"^ \",\"n\",\"pluginTemplate\",\"v\",[\"^ \",\"id\",\"webhookReturn1\",\"^4\",null,\"^5\",\"datasource\",\"^6\",\"JavascriptQuery\",\"^7\",null,\"^8\",\"JavascriptQuery\",\"^9\",null,\"^:\",[\"^3\",[\"queryRefreshTime\",\"\",\"allowedGroupIds\",[\"^;\",[]],\"streamResponse\",false,\"lastReceivedFromResourceAt\",null,\"queryDisabledMessage\",\"\",\"servedFromCache\",false,\"offlineUserQueryInputs\",\"\",\"successMessage\",\"\",\"queryDisabled\",\"\",\"playgroundQuerySaveId\",\"latest\",\"workflowParams\",null,\"resourceNameOverride\",\"\",\"runWhenModelUpdates\",false,\"workflowRunId\",null,\"showFailureToaster\",true,\"query\",\"const generateReturn = () => {\\n    const status = () => {\\n      try {\\n        return 200\\n      } catch {\\n        return 200\\n      }\\n    }\\n  const body = () => {\\n    try {\\n      return {\\n  \\\"predictions\\\": code.data.predictions\\n}\\n    } catch {\\n      return {'error': true, 'messsage': 'there was a problem parsing the JSON body of webhookReturn1'}\\n    }\\n  }\\n  return {status: status(), body: body() }\\n  }\\n  return generateReturn()\\n  \",\"playgroundQueryUuid\",\"\",\"playgroundQueryId\",null,\"error\",null,\"workflowRunBodyType\",\"raw\",\"privateParams\",[\"^;\",[]],\"workflowBlockUuid\",null,\"runWhenPageLoadsDelay\",\"\",\"data\",null,\"importedQueryInputs\",[\"^3\",[]],\"_additionalScope\",[\"^;\",[]],\"isImported\",false,\"showSuccessToaster\",true,\"cacheKeyTtl\",\"\",\"requestSentTimestamp\",null,\"metadata\",null,\"workflowActionType\",null,\"editorMode\",\"sql\",\"queryRunTime\",null,\"changesetObject\",\"\",\"errorTransformer\",\"// The variable 'data' allows you to reference the request's data in the transformer. \\n// example: return data.find(element => element.isError)\\nreturn data.error\",\"finished\",null,\"confirmationMessage\",null,\"isFetching\",false,\"changeset\",\"\",\"rawData\",null,\"queryTriggerDelay\",\"0\",\"resourceTypeOverride\",null,\"watchedParams\",[\"^;\",[]],\"enableErrorTransformer\",false,\"showLatestVersionUpdatedWarning\",false,\"timestamp\",0,\"evalType\",\"script\",\"importedQueryDefaults\",[\"^3\",[]],\"enableTransformer\",false,\"showUpdateSetValueDynamicallyToggle\",true,\"overrideOrgCacheForUserCache\",false,\"runWhenPageLoads\",false,\"transformer\",\"// Query results are available as the `data` variable\\nreturn data\",\"events\",[\"^;\",[]],\"queryTimeout\",\"10000\",\"workflowId\",null,\"requireConfirmation\",false,\"queryFailureConditions\",\"\",\"changesetIsObject\",false,\"enableCaching\",false,\"allowedGroups\",[\"^;\",[]],\"offlineQueryType\",\"None\",\"queryThrottleTime\",\"750\",\"updateSetValueDynamically\",false,\"notificationDuration\",\"\"]],\"^<\",null,\"^=\",null,\"^>\",null,\"^?\",null,\"^@\",null,\"^A\",\"\",\"^B\",\"~m1707324256046\",\"^C\",\"~m1707324257565\",\"^D\",\"\",\"^E\",null]]]]],\"^B\",null,\"version\",\"3.33.0\",\"appThemeId\",null,\"appThemeName\",null,\"appMaxWidth\",\"100%\",\"preloadedAppJavaScript\",null,\"preloadedAppJSLinks\",[],\"testEntities\",[],\"tests\",[],\"appStyles\",\"\",\"responsiveLayoutDisabled\",false,\"loadingIndicatorsDisabled\",false,\"urlFragmentDefinitions\",[\"^;\",[]],\"pageLoadValueOverrides\",[\"^;\",[]],\"customDocumentTitle\",\"\",\"customDocumentTitleEnabled\",false,\"customShortcuts\",[],\"isGlobalWidget\",false,\"isMobileApp\",false,\"isFormApp\",false,\"shortlink\",null,\"multiScreenMobileApp\",false,\"mobileAppSettings\",[\"^ \",\"mobileOfflineModeEnabled\",false,\"mobileOfflineModeDelaySync\",false,\"mobileOfflineModeBannerMode\",\"default\",\"displaySetting\",[\"^ \",\"landscapeMode\",false,\"tabletMode\",false]],\"notificationsSettings\",[\"^ \",\"globalQueryShowFailureToast\",true,\"globalQueryShowSuccessToast\",false,\"globalQueryToastDuration\",4.5],\"folders\",[\"^;\",[]],\"queryStatusVisibility\",false,\"markdownLinkBehavior\",\"auto\",\"inAppRetoolPillAppearance\",\"NO_OVERRIDE\",\"rootScreen\",null,\"instrumentationEnabled\",false,\"experimentalFeatures\",[\"^ \",\"sourceControlTemplateDehydration\",false,\"multiplayerEditingEnabled\",false,\"disableMultiplayerEditing\",false],\"experimentalDataTabEnabled\",false,\"customComponentCollections\",[],\"savePlatform\",\"web\"]]]","triggerWebhooks":[{"name":"startTrigger","uuid":"startTrigger","inputSchema":{"properties":[]},"useHeaderApiKey":false,"exampleInputJSON":""}],"customLibraries":[{"version":"4.17.21","language":"javascript","variable":"_","codeString":"/* Edit library variable below */\n\nconst _ = require('lodash')\n\n/* Add destructured imports from library below\neg. const { pow, log } = require(\"mathjs\") */\n","libraryName":"lodash"},{"version":"2.1.0","language":"javascript","variable":"numbro","codeString":"/* Edit library variable below */\n\nconst numbro = require('numbro')\n\n/* Add destructured imports from library below\neg. const { pow, log } = require(\"mathjs\") */\n","libraryName":"numbro"},{"version":"5.3.2","language":"javascript","variable":"Papa","codeString":"/* Edit library variable below */\n\nconst Papa = require('papaparse')\n\n/* Add destructured imports from library below\neg. const { pow, log } = require(\"mathjs\") */\n","libraryName":"papaparse"},{"version":"0.5.23","language":"javascript","variable":"moment","codeString":"/* Edit library variable below */\n\nconst moment = require('moment-timezone')\n\n/* Add destructured imports from library below\neg. const { pow, log } = require(\"mathjs\") */\n","libraryName":"moment-timezone"},{"version":"3.4.0","language":"javascript","variable":"uuid","codeString":"/* Edit library variable below */\n\nconst uuid = require('uuid')\n\n/* Add destructured imports from library below\neg. const { pow, log } = require(\"mathjs\") */\n","libraryName":"uuid"}],"createdBy":959881,"protected":false,"javascriptLanguageConfigurationSaveId":null,"pythonLanguageConfigurationSaveId":null,"setupScripts":{"python":{"codeString":""},"javascript":{"codeString":""}}}